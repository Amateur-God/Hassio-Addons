---
name: Add-on CI/CD

on:
  push:
    tags:
      - '*'
    branches:
      - "*"
  pull_request:
    branches:
      - "main"

jobs:
  discover:
    name: Discover Add-ons
    runs-on: ubuntu-latest
    outputs:
      addon_dirs: ${{ steps.folders.outputs.addon_dirs }}
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v4
      - name: Find add-on directories
        id: folders
        run: |
          ADDON_DIRS=$(find addons -mindepth 1 -maxdepth 1 -type d | jq -R -s -c 'split("\n") | map(select(length > 0))')
          echo "Found add-on directories: $ADDON_DIRS"
          echo "addon_dirs=$ADDON_DIRS" >> $GITHUB_OUTPUT
      - name: Debug - List directories
        run: |
          echo "Found add-on directories: ${{ steps.folders.outputs.addon_dirs }}"

  information:
    name: Gather add-on information
    needs: discover
    runs-on: ubuntu-latest
    strategy:
      matrix:
        folder: ${{ fromJson(needs.discover.outputs.addon_dirs) }}
    outputs:
      addon_dirs: ${{ needs.discover.outputs.addon_dirs }}
      architectures: ${{ steps.information.outputs.architectures }}
      build: ${{ steps.information.outputs.build }}
      description: ${{ steps.information.outputs.description }}
      name: ${{ steps.information.outputs.name }}
      slug: ${{ steps.information.outputs.slug }}
      target: ${{ steps.information.outputs.target }}
      version: ${{ steps.read_version.outputs.version }}
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensure all tags are fetched
      - name: Debug - Print matrix folder path
        run: |
          echo "Matrix folder path: ${{ matrix.folder }}"
      - name: Run add-on information action
        id: information
        uses: frenck/action-addon-information@v1
        with:
          path: "./${{ matrix.folder }}"
      - name: Read version from version.txt
        id: read_version
        run: |
          VERSION=$(cat ./${{ matrix.folder }}/version.txt)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      - name: Update config.json
        run: |
          jq --arg version "${{ steps.read_version.outputs.version }}" '.version = $version' ./${{ matrix.folder }}/config.json > tmp.json && mv tmp.json ./${{ matrix.folder }}/config.json
      - name: Update build.json
        run: |
          jq --arg version "${{ steps.read_version.outputs.version }}" '.version = $version' ./${{ matrix.folder }}/build.json > tmp.json && mv tmp.json ./${{ matrix.folder }}/build.json
      - name: Commit and push changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add ./${{ matrix.folder }}/config.json ./${{ matrix.folder }}/build.json
          git commit -m "Update version to ${{ steps.read_version.outputs.version }} in config.json and build.json"
          git push https://${{ github.actor }}:${{ env.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git HEAD:${{ github.ref }}
      - name: Debug - List extracted information
        run: |
          echo "Architectures: ${{ steps.information.outputs.architectures }}"
          echo "Build: ${{ steps.information.outputs.build }}"
          echo "Description: ${{ steps.information.outputs.description }}"
          echo "Name: ${{ steps.information.outputs.name }}"
          echo "Slug: ${{ steps.information.outputs.slug }}"
          echo "Target: ${{ steps.information.outputs.target }}"
          echo "Version: ${{ steps.read_version.outputs.version }}"



  lint-addon:
    name: Lint Add-on
    needs: information
    runs-on: ubuntu-latest
    strategy:
      matrix:
        folder: ${{ fromJson(needs.information.outputs.addon_dirs) }}
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v4
      - name: Debug - Print matrix folder path
        run: |
          echo "Matrix folder path: ${{ matrix.folder }}"
      - name: Run Add-on Lint
        uses: frenck/action-addon-linter@v2.15.1
        with:
          community: true
          path: "./${{ matrix.folder }}"

  lint-hadolint:
    name: Hadolint
    needs: information
    runs-on: ubuntu-latest
    strategy:
      matrix:
        folder: ${{ fromJson(needs.information.outputs.addon_dirs) }}
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v4
      - name: Debug - Print matrix folder path
        run: |
          echo "Matrix folder path: ${{ matrix.folder }}"
      - name: Run Hadolint
        uses: brpaz/hadolint-action@v1.5.0
        with:
          dockerfile: "./${{ matrix.folder }}/Dockerfile"
          config: .hadolint.yaml

  lint-json:
    name: JSON Lint
    needs: information
    runs-on: ubuntu-latest
    strategy:
      matrix:
        folder: ${{ fromJson(needs.information.outputs.addon_dirs) }}
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v4
      - name: Debug - Print matrix folder path
        run: |
          echo "Matrix folder path: ${{ matrix.folder }}"
      - name: Run JQ
        run: |
          shopt -s globstar
          cat ./${{ matrix.folder }}/**/*.json | jq '.'

  lint-shellcheck:
    name: Shellcheck
    needs: information
    runs-on: ubuntu-latest
    strategy:
      matrix:
        folder: ${{ fromJson(needs.information.outputs.addon_dirs) }}
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v4
      - name: Debug - Print matrix folder path
        run: |
          echo "Matrix folder path: ${{ matrix.folder }}"
      - name: Run Shellcheck
        uses: ludeeus/action-shellcheck@2.0.0
        env:
          SHELLCHECK_OPTS: -s bash

  lint-yamllint:
    name: YAMLLint
    needs: information
    runs-on: ubuntu-latest
    strategy:
      matrix:
        folder: ${{ fromJson(needs.information.outputs.addon_dirs) }}
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v4
      - name: Debug - Print matrix folder path
        run: |
          echo "Matrix folder path: ${{ matrix.folder }}"
      - name: Run YAMLLint
        uses: frenck/action-yamllint@v1.5
        with:
          config: .yamllint

  build:
    name: Build ${{ matrix.architecture }}
    needs:
      - lint-addon
      - lint-hadolint
      - lint-json
      - lint-shellcheck
      - lint-yamllint
      - information
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        architecture: ${{ fromJson(needs.information.outputs.architectures || '["amd64"]') }}
        folder: ${{ fromJson(needs.information.outputs.addon_dirs || '["addons/example"]') }}
    outputs:
      version: ${{ needs.information.outputs.version }}
      name: ${{ needs.information.outputs.name }}
      slug: ${{ needs.information.outputs.slug }}
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v4
      - name: Debug - Print matrix folder path
        run: |
          echo "Matrix folder path: ${{ matrix.folder }}"
      - name: Set up build cache
        id: cache
        uses: actions/cache@v4.0.2
        with:
          path: /tmp/.docker-cache
          key: docker-${{ matrix.architecture }}-${{ github.sha }}
          restore-keys: |
            docker-${{ matrix.architecture }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.0.0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.3.0
      - name: Compose build flags
        id: flags
        run: |
          echo "date=$(date '+%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
          from=$(yq eval '.build_from["${{ matrix.architecture }}"]' "${{ needs.information.outputs.build }}")
          from=$(echo $from | tr -d '"')
          echo "from=${from}" >> $GITHUB_OUTPUT
          echo "BUILD_VERSION=${{ needs.information.outputs.version }}" >> $GITHUB_OUTPUT
          if [[ "${{ matrix.architecture }}" == "amd64" ]]; then
            echo "platform=linux/amd64" >> $GITHUB_OUTPUT
          elif [[ "${{ matrix.architecture }}" == "i386" ]]; then
            echo "platform=linux/386" >> $GITHUB_OUTPUT
          elif [[ "${{ matrix.architecture }}" == "armhf" ]]; then
            echo "platform=linux/arm/v6" >> $GITHUB_OUTPUT
          elif [[ "${{ matrix.architecture }}" == "armv7" ]]; then
            echo "platform=linux/arm/v7" >> $GITHUB_OUTPUT
          elif [[ "${{ matrix.architecture }}" == "aarch64" ]]; then
            echo "platform=linux/arm64/v8" >> $GITHUB_OUTPUT
          else
            echo "::error ::Could not determine platform for architecture ${{ matrix.architecture }}"
            exit 1
      - name: Debug - Print 'from' variable
        run: |
          echo "From variable: ${{ steps.flags.outputs.from }}"
      - name: Download base image
        if: steps.flags.outputs.from != 'null'
        run: |
          echo "Pulling base image: ${{ steps.flags.outputs.from }}"
          docker pull ${{ steps.flags.outputs.from }}
      - name: Build
        uses: docker/build-push-action@v6.2.0
        with:
          push: false
          context: ./${{ matrix.folder }}
          file: ./${{ matrix.folder }}/Dockerfile
          cache-from: |
            type=local,src=/tmp/.docker-cache
            format('ghcr.io/{0}/{1}/{2}:edge', github.repository_owner, needs.information.outputs.slug, matrix.architecture)
          cache-to: type=local,mode=max,dest=/tmp/.docker-cache-new
          platforms: ${{ steps.flags.outputs.platform }}
          build-args: |
            BUILD_ARCH=${{ matrix.architecture }}
            BUILD_DATE=${{ steps.flags.outputs.date }}
            BUILD_DESCRIPTION=${{ needs.information.outputs.description }}
            BUILD_FROM=${{ steps.flags.outputs.from }}
            BUILD_NAME=${{ needs.information.outputs.name }}
            BUILD_REF=${{ github.sha }}
            BUILD_REPOSITORY=${{ github.repository }}
            BUILD_VERSION=${{ needs.information.outputs.version }}
      - name: Swap build cache
        run: |
          rm -rf /tmp/.docker-cache
          mv /tmp/.docker-cache-new /tmp/.docker-cache

  publish:
    name: Publish to Repository
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - name: Log in to GitHub Container Registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Tag Docker image
        run: |
          IMAGE_NAME="${{ needs.build.outputs.slug }}"
          IMAGE_TAG="${{ needs.build.outputs.version }}"
          docker tag $IMAGE_NAME:latest ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME:latest
          docker tag $IMAGE_NAME:latest ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME:$IMAGE_TAG
      - name: Push Docker image to GHCR
        run: |
          IMAGE_NAME="${{ needs.build.outputs.slug }}"
          IMAGE_TAG="${{ needs.build.outputs.version }}"
          docker push ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME:latest
          docker push ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME:$IMAGE_TAG
      - name: Make GHCR image public
        run: |
          IMAGE_NAME="${{ needs.build.outputs.slug }}"
          gh api --method PATCH -H "Accept: application/vnd.github.v3+json" /user/packages/container/ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME/visibility --field visibility=public
      - name: Dispatch repository update signal
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.DISPATCH_TOKEN }}
          repository: ${{ github.repository }}
          event-type: update
          client-payload: >
            {
              "addon": ${{ needs.build.outputs.slug }},
              "name": ${{ needs.build.outputs.name }},
              "repository": "${{ github.repository }}",
              "version": "${{ needs.build.outputs.version }}"
            }
