name: Add-on CI/CD

on:
  push:
    tags:
      - '*'
    branches:
      - "*"
  pull_request:
    branches:
      - "main"

jobs:
  discover:
    name: Discover Add-ons
    runs-on: ubuntu-latest
    outputs:
      addon_dirs: ${{ steps.folders.outputs.addon_dirs }}
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v4
      - name: Find add-on directories
        id: folders
        run: |
          ADDON_DIRS=$(find addons -mindepth 1 -maxdepth 1 -type d | jq -R -s -c 'split("\n") | map(select(length > 0))')
          echo "Found add-on directories: $ADDON_DIRS"
          echo "addon_dirs=$ADDON_DIRS" >> $GITHUB_OUTPUT
      - name: Debug - List directories
        run: |
          echo "Found add-on directories: ${{ steps.folders.outputs.addon_dirs }}"

  information:
    name: Gather add-on information
    needs: discover
    runs-on: ubuntu-latest
    strategy:
      matrix:
        folder: ${{ fromJson(needs.discover.outputs.addon_dirs) }}
    outputs:
      addon_dirs: ${{ needs.discover.outputs.addon_dirs }}
      architectures: ${{ steps.information.outputs.architectures }}
      build: ${{ steps.information.outputs.build }}
      description: ${{ steps.information.outputs.description }}
      name: ${{ steps.information.outputs.name }}
      slug: ${{ steps.information.outputs.slug }}
      target: ${{ steps.information.outputs.target }}
      version: ${{ steps.read_version.outputs.version }}
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensure all tags are fetched
      - name: Debug - Print matrix folder path
        run: |
          echo "Matrix folder path: ${{ matrix.folder }}"
      - name: Run add-on information action
        id: information
        uses: frenck/action-addon-information@v1
        with:
          path: "./${{ matrix.folder }}"
      - name: Read version from version.txt
        id: read_version
        run: |
          VERSION=$(cat ./${{ matrix.folder }}/version.txt)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      - name: Ensure version is 'dev-versionnumber' for branches
        if: github.ref != 'refs/heads/main'
        run: |
          VERSION=$(cat ./${{ matrix.folder }}/version.txt)
          jq --arg version "dev-$VERSION" '.version = $version' ./${{ matrix.folder }}/config.json > tmp.json && mv tmp.json ./${{ matrix.folder }}/config.json
      - name: Ensure version is correct for main
        if: github.ref == 'refs/heads/main'
        run: |
          VERSION=$(cat ./${{ matrix.folder }}/version.txt)
          jq --arg version "$VERSION" '.version = $version' ./${{ matrix.folder }}/config.json > tmp.json && mv tmp.json ./${{ matrix.folder }}/config.json
      - name: Update build.json
        run: |
          VERSION=$(cat ./${{ matrix.folder }}/version.txt)
          jq --arg version "$VERSION" '.BUILD_VERSION = $version' ./${{ matrix.folder }}/build.json > tmp.json && mv tmp.json ./${{ matrix.folder }}/build.json
      - name: Commit and push changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add ./${{ matrix.folder }}/config.json ./${{ matrix.folder }}/build.json
          if ! git diff-index --quiet HEAD; then
            git commit -m "Update version in config.json and build.json"
            git pull --rebase origin ${{ github.ref }}
            git push https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git HEAD:${{ github.ref }}
          else
            echo "No changes to commit"
          fi
      - name: Debug - List extracted information
        run: |
          echo "Architectures: ${{ steps.information.outputs.architectures }}"
          echo "Build: ${{ steps.information.outputs.build }}"
          echo "Description: ${{ steps.information.outputs.description }}"
          echo "Name: ${{ steps.information.outputs.name }}"
          echo "Slug: ${{ steps.information.outputs.slug }}"
          echo "Target: ${{ steps.information.outputs.target }}"
          echo "Version: ${{ steps.read_version.outputs.version }}"

  build:
    runs-on: ubuntu-latest
    needs:
      - information
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into registry ghcr.io
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        run: |
          IMAGE_NAME=$(echo "${{ needs.information.outputs.slug }}" | tr '[:upper:]' '[:lower:]')
          IMAGE_REPO="ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME"
          echo "images=${IMAGE_REPO}" >> $GITHUB_ENV
          BUILD_REPOSITORY=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "build_repository=${BUILD_REPOSITORY}" >> $GITHUB_ENV

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.folder }}
          file: ./${{ matrix.folder }}/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ env.images }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_ARCH=${{ matrix.architecture }}
            BUILD_DATE=${{ steps.flags.outputs.date }}
            BUILD_DESCRIPTION=${{ needs.information.outputs.description }}
            BUILD_FROM=${{ steps.flags.outputs.from }}
            BUILD_NAME=${{ needs.information.outputs.name }}
            BUILD_REF=${{ github.sha }}
            BUILD_REPOSITORY=${{ env.build_repository }}
            BUILD_VERSION=${{ needs.information.outputs.version }}


      - name: Make GHCR image public
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          IMAGE_NAME="${{ needs.information.outputs.slug }}"
          IMAGE_REPO="ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME"
          IMAGE_REPO_LOWER=$(echo "$IMAGE_REPO" | tr '[:upper:]' '[:lower:]')
          gh api --method PATCH -H "Accept: application/vnd.github.v3+json" /user/packages/container/$IMAGE_REPO_LOWER/visibility --field visibility=public

      - name: Ensure correct image link in config.json
        run: |
          IMAGE_URL="ghcr.io/${{ github.repository_owner }}/${{ needs.information.outputs.slug }}"
          CONFIG_FILE="./${{ matrix.folder }}/config.json"
          jq --arg image "$IMAGE_URL" '.image = $image' $CONFIG_FILE > tmp.$$.json && mv tmp.$$.json $CONFIG_FILE
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add $CONFIG_FILE
          git commit -m "Update image link in config.json to $IMAGE_URL"
          git push https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git HEAD:${{ github.ref }}

      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
